threadGroup通过把各个thread组织成树形结构，新的thread创建时会默认继承父线程组的优先级，
对于批量处理thread有更加细致的操作选择，满足用户更多的批量处理需求。

https://blog.csdn.net/hshqiang/article/details/83029200



摘要：线程组ThreadGroup表示一组线程的集合,一旦一个线程归属到一个线程组之中后，就不能再更换其所在的线程组。
那么为什么要使用线程组呢？个人认为有以下的好处：
    方便统一管理，线程组可以进行复制，快速定位到一个线程，统一进行异常设置等。
    ThreadGroup它其实并不属于Java并发包中的内容，它是java.lang中的内容。
    但是掌握对其的于理解，在实际应用中有很大的帮助。


ThreadGroup线程组表示一个线程的集合。此外，线程组也可以包含其他线程组。
线程组构成一棵树，在树中，除了初始线程组外，每个线程组都有一个父线程组。
允许线程访问有关自己的线程组的信息，但是不允许它访问有关其线程组的父线程组或其他任何线程组的信息。


需要注意的函数：
public final void checkAccess()  确定当前运行的线程是否有权修改此线程组。
    如果有安全管理器，则用此线程组作为其参数调用 checkAccess 方法。结果可能是抛出一个 SecurityException。
    抛出：
        SecurityException - 如果不允许当前线程访问此线程组。
    注意：它返回的居然是void，而不是boolean.其实如果当前运行的线程没有权修改此线程组，
    则抛出一个 SecurityException。 否则不抛出。

public int enumerate(Thread[] list)
    把此线程组及其子组中的所有活动线程复制到指定数组中。
    首先，不使用任何参数调用此线程组的 checkAccess 方法；这可能导致一个安全性异常。
    应用程序可以使用 activeCount 方法获取数组大小的估计数，
    但是，如果数组太小而无法保持所有线程，则忽略额外的线程。
    如果获得此线程组及其子组中的所有活动线程非常重要，
    则调用方应该验证返回的 int 值是否严格小于 list 的长度。
    由于使用此方法所固有的竞争条件，建议只将此方法用于信息目的。
    参数：
        list - 放置线程列表的数组。
    返回：
        放入数组中的线程数。
    抛出：
        SecurityException - 如果不允许当前线程枚举此线程组。

    注意：它的目的是把子组中的所有活动线程复制到指定数组list中。还有一些enumerate的函数，具体参考文档。

public final void interrupt()
    中断此线程组中的所有线程。
    首先，不使用任何参数调用此线程组的 checkAccess 方法；这可能导致一个安全性异常。
    然后，此方法将对此线程组及其所有子组中的所有线程调用 interrupt 方法。
    抛出：
        SecurityException - 如果不允许当前线程访问此线程组或线程组中的任何线程
